/*
 *     Generated by class-dump 3.3.1 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2009 by Steve Nygard.
 */

// #pragma mark Named Structures
// 
// struct AlbumInfo;
// 
// struct AppContext;
// 
// struct AppProgressBar {
//     struct SLinkElement _field1;
//     unsigned int _field2;
//     unsigned int _field3;
//     struct AppContext *_field4;
//     unsigned short _field5[256];
//     unsigned short _field6[256];
//     unsigned short _field7[256];
//     unsigned short _field8[256];
//     int _field9;
//     double _field10;
//     unsigned int _field11;
//     double _field12;
//     double _field13;
//     double _field14;
//     double _field15;
//     struct MessageReceiver _field16;
//     void *_field17;
//     void *_field18;
//     unsigned char _field19;
//     unsigned char _field20;
//     unsigned char _field21[2];
// };
// 
// struct ArtistInfo;
// 
// struct BookletJSEventDelegate {
//     void **_field1;
//     struct __CFDictionary *_field2;
// };
// 
// struct BorderInfo {
//     float width;
//     struct ITColor color;
// };
// 
// struct CGPoint {
//     float x;
//     float y;
// };
// 
// struct CGRect {
//     struct CGPoint origin;
//     struct CGSize size;
// };
// 
// struct CGSize {
//     float width;
//     float height;
// };
// 
// struct DLinkElement;
// 
// struct DLinkList {
//     struct DLinkElement *first;
//     struct DLinkElement *last;
// };
// 
// struct ExtendedTrackInfo;
// 
// struct FSRef {
//     unsigned char _field1[80];
// };
// 
// struct HIObjectBridge;
// 
// struct HUD;
// 
// struct HashMap<PPx::View*, IT::Vector<PPxViewNSViewWrapper*, 0ul>, IT::PtrHash<PPx::View*>, IT::HashTraits<PPx::View*>, IT::HashTraits<IT::Vector<PPxViewNSViewWrapper*, 0ul>>> {
//     struct HashTable<int, std::pair<int, IT::Vector<PPxViewNSViewWrapper*, 0ul>>, IT::PairFirstExtractor<std::pair<int, IT::Vector<PPxViewNSViewWrapper*, 0ul>>>, IT::IntHash<int32_t>, IT::PairHashTraits<IT::HashTraits<int32_t>, IT::HashTraits<IT::Vector<PPxViewNSViewWrapper*, 0ul>>>, IT::HashTraits<int32_t>> _field1;
// };
// 
// struct HashSet<long unsigned int, IT::IntHash<uintptr_t>, IT::HashTraits<long unsigned int>> {
//     struct HashTable<long unsigned int, long unsigned int, IT::IdentityExtractor<long unsigned int>, IT::IntHash<uintptr_t>, IT::HashTraits<long unsigned int>, IT::HashTraits<long unsigned int>> _field1;
// };
// 
// struct HashTable<int, std::pair<int, IT::Vector<PPxViewNSViewWrapper*, 0ul>>, IT::PairFirstExtractor<std::pair<int, IT::Vector<PPxViewNSViewWrapper*, 0ul>>>, IT::IntHash<int32_t>, IT::PairHashTraits<IT::HashTraits<int32_t>, IT::HashTraits<IT::Vector<PPxViewNSViewWrapper*, 0ul>>>, IT::HashTraits<int32_t>> {
//     struct pair<int, IT::Vector<PPxViewNSViewWrapper*, 0ul>> *_field1;
//     int _field2;
//     int _field3;
//     int _field4;
//     int _field5;
// };
// 
// struct HashTable<long unsigned int, long unsigned int, IT::IdentityExtractor<long unsigned int>, IT::IntHash<uintptr_t>, IT::HashTraits<long unsigned int>, IT::HashTraits<long unsigned int>> {
//     unsigned long *m_table;
//     int m_tableSize;
//     int m_tableSizeMask;
//     int m_keyCount;
//     int m_deletedCount;
// };
// 
// struct IT3DRenderer;
// 
// struct IT3DTexture;
// 
// struct ITAnimation;
// 
// struct ITColor {
//     float mRed;
//     float mGreen;
//     float mBlue;
//     float mAlpha;
// };
// 
// struct ITFrameMetrics {
//     float top;
//     float left;
//     float bottom;
//     float right;
// };
// 
// struct ITImage;
// 
// struct ITObjectSpec {
//     unsigned int trackDataID;
//     unsigned int playlistID;
//     unsigned int playlistItemID;
//     unsigned int trackID;
//     unsigned int trackInstanceID;
//     unsigned int albumInfoID;
//     unsigned int artistInfoID;
// };
// 
// struct ITScrollBar {
//     void **_field1;
//     unsigned int _field2;
//     struct map<ITString, std::set<ITPropertyObserver*, std::less<ITPropertyObserver*>, std::allocator<ITPropertyObserver*>>, std::less<ITString>, std::allocator<std::pair<const ITString, std::set<ITPropertyObserver*, std::less<ITPropertyObserver*>, std::allocator<ITPropertyObserver*>>>>> _field3;
//     struct ITString _field4;
//     struct ITString _field5;
//     struct HIObjectBridge *_field6;
//     struct ITViewController *_field7;
//     unsigned int _field8;
//     int _field9;
//     struct CGPoint _field10;
//     struct CGSize _field11;
//     struct CGRect _field12;
//     struct CGPoint _field13;
//     unsigned int _field14;
//     struct ITFrameMetrics _field15;
//     _Bool _field16;
//     struct RefPtr<ITImage> _field17;
//     unsigned int _field18;
//     float _field19;
//     int _field20;
//     struct CGRect _field21;
//     int _field22;
//     struct ITVector _field23;
//     struct CGSize _field24;
//     struct ITWindow *_field25;
//     struct ITView *_field26;
//     struct RefPtr<ITView> _field27;
//     struct RefPtr<ITView> _field28;
//     struct RefPtr<ITView> _field29;
//     struct RefPtr<ITView> _field30;
//     struct RefPtr<ITView> _field31;
//     unsigned int _field32;
//     unsigned int _field33;
//     struct RefPtr<ITView> _field34;
//     _Bool _field35;
//     struct RefPtr<ITView> _field36;
//     struct ITString _field37;
//     struct ITString _field38;
//     struct ITColor _field39;
//     struct ITViewAdapter *_field40;
//     struct ITViewFocusDelegate *_field41;
//     struct IT3DRenderer *_field42;
//     struct IT3DTexture *_field43;
//     _Bool _field44;
//     struct BorderInfo _field45[4];
//     _Bool _field46;
//     _Bool _field47;
//     struct ITViewTrackingDelegate *_field48;
//     struct ITViewContextMenuDelegate *_field49;
//     struct ITViewDragDelegate *_field50;
//     _Bool _field51;
//     struct OpaqueHIViewTrackingAreaRef *_field52;
//     struct ITViewTextInputDelegate *_field53;
//     struct RefPtr<ITAnimation> _field54;
//     struct RefPtr<ITAnimation> _field55;
//     struct RefPtr<ITAnimation> _field56;
//     struct RefPtr<ITAnimation> _field57;
//     _Bool _field58;
//     _Bool _field59;
//     struct function<void ()(ITControl*, UInt32)> _field60;
//     _Bool _field61;
//     _Bool _field62;
//     _Bool _field63;
//     int _field64;
//     _Bool _field65;
//     _Bool _field66;
//     _Bool _field67;
//     struct function<ITValue ()(ITControl*, ITValue)> _field68;
//     _Bool _field69;
//     struct ITValue _field70;
//     int _field71;
//     double _field72;
//     double _field73;
//     double _field74;
//     _Bool _field75;
//     _Bool _field76;
//     short _field77;
//     struct CGPoint _field78;
//     struct CGRect _field79;
//     double _field80;
//     RefPtr_6700895f _field81;
//     struct function<void ()(ITScrollBar*)> _field82;
// };
// 
// struct ITString {
//     struct RefPtr<ITStringBuffer<UniChar>> mData;
//     struct RefPtr<ITStringBuffer<UInt8>> mUTF8Cache;
// };
// 
// struct ITStringBuffer<UInt8>;
// 
// struct ITStringBuffer<UniChar>;
// 
// struct ITTimer {
//     void **_field1;
//     unsigned int _field2;
//     unsigned int _field3;
//     struct function<void ()(IT::RefPtr<ITTimer>)> _field4;
// };
// 
// struct ITValue {
//     int mType;
//     struct ITString mStringValue;
//     union {
//         _Bool b;
//         long long i;
//         double d;
//     } mValue;
// };
// 
// struct ITVector {
//     float x;
//     float y;
//     float z;
// };
// 
// struct ITView;
// 
// struct ITViewAdapter;
// 
// struct ITViewContextMenuDelegate;
// 
// struct ITViewController;
// 
// struct ITViewDragDelegate;
// 
// struct ITViewFocusDelegate;
// 
// struct ITViewTextInputDelegate;
// 
// struct ITViewTrackingDelegate;
// 
// struct ITWindow;
// 
// struct IViewCallback;
// 
// struct IntegerType<PPx::ObjectIDStruct, UInt32, 0u> {
//     unsigned int mValue;
// };
// 
// struct JRFileSpec {
//     unsigned int _field1;
//     unsigned int _field2;
//     struct JRFileSpecFunctionTable *_field3;
//     union {
//         struct FSRef _field1;
//         struct {
//             unsigned int _field1;
//             char _field2[256];
//         } _field2;
//     } _field4;
// };
// 
// struct JRFileSpecFunctionTable;
// 
// struct JRQElement {
//     struct JRQElement *qLink;
// };
// 
// struct MessageReceiver {
//     unsigned int magic;
//     unsigned int disableCount;
//     unsigned int modificationCount;
//     struct DLinkList senders;
//     struct OpaqueMessageSenderMap *messageSenderMap;
//     void *handlerProc;
//     void *handlerData;
// };
// 
// struct MusicStoreHTMLPage;
// 
// struct MusicStorePage;
// 
// struct OpaqueEventHandlerRef;
// 
// struct OpaqueHIObjectRef;
// 
// struct OpaqueHIViewTrackingAreaRef;
// 
// struct OpaqueJRStringCacheIndex;
// 
// struct OpaqueMessageSenderMap;
// 
// struct PlayerPluginData {
//     struct JRQElement _field1;
//     unsigned int _field2;
//     unsigned char _field3;
//     struct PluginData *_field4;
//     void *_field5;
//     void *_field6;
//     void *_field7;
//     unsigned char _field8[64];
//     unsigned int _field9;
//     unsigned int _field10;
//     unsigned int _field11;
// };
// 
// struct Playlist;
// 
// struct PlaylistItem {
//     struct Playlist *_field1;
//     struct PlaylistItem *_field2;
//     struct PlaylistItem *_field3;
//     struct PlaylistItem *_field4;
//     unsigned int _field5;
//     struct TrackInfo *_field6;
//     unsigned int _field7;
//     unsigned char _field8;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned char _field9;
//     unsigned char _field10;
//     unsigned int _field11;
//     unsigned int _field12;
//     struct PlaylistItem *_field13;
//     union {
//         struct {
//             struct PlaylistItem *_field1;
//             struct PlaylistItem *_field2;
//             unsigned int _field3;
//             unsigned int _field4;
//             struct OpaqueJRStringCacheIndex *_field5;
//             struct OpaqueJRStringCacheIndex *_field6;
//             unsigned char _field7;
//             union {
//                 struct {
//                     short _field1;
//                     unsigned short _field2;
//                     unsigned int :1;
//                     unsigned int :1;
//                     unsigned int :1;
//                     unsigned int :1;
//                     unsigned int :1;
//                 } _field1;
//                 struct {
//                     void *_field1;
//                     int _field2;
//                     void *_field3;
//                 } _field2;
//             } _field8;
//         } _field1;
//         struct {
//             unsigned int _field1;
//             struct TrackInstance *_field2;
//             void *_field3;
//             unsigned char _field4;
//             union {
//                 struct {
//                     unsigned int _field1;
//                 } _field1;
//                 struct {
//                     int _field1;
//                     void *_field2;
//                 } _field2;
//             } _field5;
//         } _field2;
//     } _field14;
// };
// 
// struct PluginData;
// 
// struct Rect {
//     short top;
//     short left;
//     short bottom;
//     short right;
// };
// 
// struct RefPtr<ITAnimation> {
//     struct ITAnimation *m_ptr;
// };
// 
// struct RefPtr<ITImage> {
//     struct ITImage *m_ptr;
// };
// 
// struct RefPtr<ITStringBuffer<UInt8>> {
//     struct ITStringBuffer<UInt8> *m_ptr;
// };
// 
// struct RefPtr<ITStringBuffer<UniChar>> {
//     struct ITStringBuffer<UniChar> *m_ptr;
// };
// 
// struct RefPtr<ITTimer> {
//     struct ITTimer *m_ptr;
// };
// 
// struct RefPtr<ITView> {
//     struct ITView *m_ptr;
// };
// 
// struct RemoteTargetObserver {
//     void **_vptr$EventTargetObserver;
//     struct OpaqueEventHandlerRef *mEventHandler;
//     struct OpaqueEventHandlerRef *mLifetimeHandler;
// };
// 
// struct SLinkElement {
//     struct SLinkElement *next;
// };
// 
// struct StoreHTMLDisplay {
//     int _field1;
//     struct UIWebKitView *_field2;
//     struct OpaqueEventHandlerRef *_field3;
//     StoreHistoryObserver *_field4;
//     StoreProgressObserver *_field5;
//     struct StorePageContext *_field6;
//     StoreFrameLoadDelegate *_field7;
//     StoreUIDelegate *_field8;
//     StoreWebPolicyDelegate *_field9;
//     StoreResourceLoadDelegate *_field10;
//     XMLDownloadDelegate *_field11;
//     struct MusicStoreHTMLPage *_field12;
//     struct __CFSet *_field13;
// };
// 
// struct StorePageContext {
//     struct ITObjectSpec _field1;
//     double _field2;
//     _Bool _field3;
//     struct __CFArray *_field4;
//     int _field5;
//     int _field6;
//     struct MusicStorePage *_field7;
//     struct __CFSet *_field8;
//     struct StoreHTMLDisplay *_field9;
// };
// 
// struct TimerBridge {
//     StoreProgressObserver *_field1;
// };
// 
// struct TrackData;
// 
// struct TrackInfo {
//     struct TrackData *_field1;
//     struct TrackInfo *_field2;
//     struct TrackInfo *_field3;
//     struct AlbumInfo *_field4;
//     struct TrackInfo *_field5;
//     struct TrackInfo *_field6;
//     struct ArtistInfo *_field7;
//     struct TrackInfo *_field8;
//     struct TrackInfo *_field9;
//     unsigned int _field10;
//     unsigned int _field11;
//     unsigned long long _field12;
//     struct ExtendedTrackInfo *_field13;
//     struct VideoTrackInfo *_field14;
//     struct TrackInstance *_field15;
//     unsigned char _field16;
//     unsigned char _field17;
//     unsigned char _field18[6];
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned int :1;
//     unsigned char _field19;
//     unsigned char _field20;
//     unsigned char _field21;
//     unsigned char _field22;
//     unsigned char _field23;
//     unsigned int _field24;
//     unsigned int _field25;
//     unsigned int _field26;
//     unsigned int _field27;
//     struct PlaylistItem *_field28;
//     struct OpaqueJRStringCacheIndex *_field29;
//     struct OpaqueJRStringCacheIndex *_field30;
//     struct OpaqueJRStringCacheIndex *_field31;
//     struct OpaqueJRStringCacheIndex *_field32;
//     struct OpaqueJRStringCacheIndex *_field33;
//     struct OpaqueJRStringCacheIndex *_field34;
//     struct OpaqueJRStringCacheIndex *_field35;
//     struct OpaqueJRStringCacheIndex *_field36;
//     struct OpaqueJRStringCacheIndex *_field37;
//     struct OpaqueJRStringCacheIndex *_field38;
//     struct OpaqueJRStringCacheIndex *_field39;
//     struct OpaqueJRStringCacheIndex *_field40;
//     unsigned int _field41;
//     unsigned int _field42;
//     unsigned int _field43;
//     unsigned int _field44;
//     unsigned short _field45;
//     short _field46;
//     short _field47;
//     char _field48;
//     unsigned char _field49;
//     char _field50;
//     unsigned char _field51;
//     unsigned short _field52;
//     unsigned short _field53;
//     unsigned short _field54;
//     unsigned short _field55;
//     unsigned int _field56;
//     unsigned int _field57;
//     unsigned int _field58;
//     unsigned int _field59;
//     unsigned int _field60;
//     unsigned int _field61;
//     unsigned short _field62;
//     unsigned short _field63;
//     unsigned int _field64;
//     unsigned long long _field65;
//     unsigned long long _field66;
//     unsigned long long _field67;
//     unsigned long long _field68;
//     unsigned int _field69;
//     unsigned int _field70;
//     struct OpaqueJRStringCacheIndex *_field71[6];
// };
// 
// struct TrackInstance;
// 
// struct UIScrollBar {
//     void **_field1;
//     struct OpaqueEventHandlerRef *_field2;
//     void **_field3;
//     struct OpaqueHIObjectRef *_field4;
//     struct IntegerType<PPx::ObjectIDStruct, UInt32, 0u> _field5;
//     _Bool _field6;
//     int _field7;
//     struct __CFString *_field8;
//     struct __CFString *_field9;
//     struct __CFString *_field10;
//     int _field11;
//     struct __CFString *_field12;
//     struct RemoteTargetObserver _field13;
//     _Bool _field14;
//     unsigned char _field15;
//     _Bool _field16;
//     struct __CFString *_field17;
//     struct __CFString *_field18;
//     struct __CFDictionary *_field19;
//     _Bool _field20;
//     _Bool _field21;
//     int _field22;
//     int _field23;
//     int _field24;
//     struct CGPoint _field25;
// };
// 
// struct UIWebKitView;
// 
// struct VideoTrackInfo;
// 
// struct View {
//     void **_field1;
//     struct OpaqueEventHandlerRef *_field2;
//     void **_field3;
//     struct OpaqueHIObjectRef *_field4;
//     struct IntegerType<PPx::ObjectIDStruct, UInt32, 0u> _field5;
//     _Bool _field6;
//     int _field7;
//     struct __CFString *_field8;
//     struct __CFString *_field9;
//     struct __CFString *_field10;
//     int _field11;
//     struct __CFString *_field12;
//     struct RemoteTargetObserver _field13;
//     _Bool _field14;
//     unsigned char _field15;
//     _Bool _field16;
// };
// 
// struct WebKitHUDAnimationInfo {
//     unsigned char doingAnimation;
//     unsigned int animationType;
//     double animationInterval;
//     double animationStart;
//     float startAlpha;
//     float endAlpha;
// };
// 
// struct WebKitHUDHandler {
//     void **_field1;
//     unsigned int _field2;
//     struct View *_field3;
//     struct AppContext *_field4;
//     struct IViewCallback *_field5;
//     struct MessageReceiver _field6;
//     struct CGRect _field7;
//     unsigned char _field8;
//     float _field9;
//     unsigned char _field10;
//     unsigned char _field11;
//     struct WebKitTimerInfo _field12;
//     struct WebKitHUDInfo _field13[2];
// };
// 
// struct WebKitHUDInfo {
//     struct HUD *hud;
//     float showHeight;
//     unsigned char haveCenter;
//     struct CGPoint center;
//     struct WebKitHUDAnimationInfo animationInfo;
// };
// 
// struct WebKitTimerInfo {
//     unsigned int timer;
//     double timerInterval;
//     double startTime;
// };
// 
// struct _NSPoint {
//     float _field1;
//     float _field2;
// };
// 
// struct _NSRect {
//     struct _NSPoint _field1;
//     struct _NSSize _field2;
// };
// 
// struct _NSSize {
//     float _field1;
//     float _field2;
// };
// 
// struct _Rb_tree<ITString, std::pair<const ITString, std::set<ITPropertyObserver*, std::less<ITPropertyObserver*>, std::allocator<ITPropertyObserver*>>>, std::_Select1st<std::pair<const ITString, std::set<ITPropertyObserver*, std::less<ITPropertyObserver*>, std::allocator<ITPropertyObserver*>>>>, std::less<ITString>, std::allocator<std::pair<const ITString, std::set<ITPropertyObserver*, std::less<ITPropertyObserver*>, std::allocator<ITPropertyObserver*>>>>> {
//     struct _Rb_tree_impl<std::less<ITString>, false> _M_impl;
// };
// 
// struct _Rb_tree_impl<std::less<ITString>, false> {
//     struct less<ITString> _M_key_compare;
//     struct _Rb_tree_node_base _M_header;
//     unsigned int _M_node_count;
// };
// 
// struct _Rb_tree_node_base {
//     int _M_color;
//     struct _Rb_tree_node_base *_M_parent;
//     struct _Rb_tree_node_base *_M_left;
//     struct _Rb_tree_node_base *_M_right;
// };
// 
// struct __CFDictionary;
// 
// struct __CFSet;
// 
// struct __CFString;
// 
// struct function<ITValue ()(ITControl*, ITValue)> {
//     union _Any_data _M_functor;
//     void *_M_manager;
//     void *_M_invoker;
// };
// 
// struct function<void ()(IT::RefPtr<ITTimer>)> {
//     union _Any_data _M_functor;
//     void *_M_manager;
//     void *_M_invoker;
// };
// 
// struct function<void ()(ITControl*, UInt32)> {
//     union _Any_data _M_functor;
//     void *_M_manager;
//     void *_M_invoker;
// };
// 
// struct function<void ()(ITScrollBar*)> {
//     union _Any_data _M_functor;
//     void *_M_manager;
//     void *_M_invoker;
// };
// 
// struct less<ITString>;
// 
// struct map<ITString, std::set<ITPropertyObserver*, std::less<ITPropertyObserver*>, std::allocator<ITPropertyObserver*>>, std::less<ITString>, std::allocator<std::pair<const ITString, std::set<ITPropertyObserver*, std::less<ITPropertyObserver*>, std::allocator<ITPropertyObserver*>>>>> {
//     struct _Rb_tree<ITString, std::pair<const ITString, std::set<ITPropertyObserver*, std::less<ITPropertyObserver*>, std::allocator<ITPropertyObserver*>>>, std::_Select1st<std::pair<const ITString, std::set<ITPropertyObserver*, std::less<ITPropertyObserver*>, std::allocator<ITPropertyObserver*>>>>, std::less<ITString>, std::allocator<std::pair<const ITString, std::set<ITPropertyObserver*, std::less<ITPropertyObserver*>, std::allocator<ITPropertyObserver*>>>>> _M_t;
// };
// 
// struct pair<int, IT::Vector<PPxViewNSViewWrapper*, 0ul>>;
// 
// #pragma mark Typedef'd Structures
// 
// // Template types
// typedef struct HashMap<PPx::View*, IT::Vector<PPxViewNSViewWrapper*, 0ul>, IT::PtrHash<PPx::View*>, IT::HashTraits<PPx::View*>, IT::HashTraits<IT::Vector<PPxViewNSViewWrapper*, 0ul>>> {
//     struct HashTable<int, std::pair<int, IT::Vector<PPxViewNSViewWrapper*, 0ul>>, IT::PairFirstExtractor<std::pair<int, IT::Vector<PPxViewNSViewWrapper*, 0ul>>>, IT::IntHash<int32_t>, IT::PairHashTraits<IT::HashTraits<int32_t>, IT::HashTraits<IT::Vector<PPxViewNSViewWrapper*, 0ul>>>, IT::HashTraits<int32_t>> _field1;
// } HashMap_79996020;
// 
// typedef struct RefPtr<ITTimer> {
//     struct ITTimer *m_ptr;
// } RefPtr_6700895f;
// 
// #pragma mark Named Unions
// 
// union _Any_data {
//     union _Nocopy_types _M_unused;
//     char _M_pod_data[8];
// };
// 
// union _Nocopy_types {
//     void *_M_object;
//     void *_M_const_object;
//     void *_M_function_pointer;
//     struct {
//         void *__pfn;
//         int __delta;
//     } _M_member_pointer;
// };

// #pragma mark -

@protocol NSValidatedUserInterfaceItem
- (SEL)action;
- (int)tag;
@end

@interface ITNSMenuItemProxy : NSObject <NSValidatedUserInterfaceItem>
{
    int _tag;
    SEL _action;
}

- (id)initWithAction:(SEL)arg1;
- (SEL)action;
- (int)tag;

@end

@interface ScrollerAdapter : NSScroller
{
}

- (void)drawRect:(struct _NSRect)arg1;

@end

@interface ClipViewAdapter : NSClipView
{
}

- (BOOL)_boundToHIView;
- (void)_immediateScrollToPoint:(struct _NSPoint)arg1;

@end

@interface CocoaViewAdapter : NSView
{
}

- (BOOL)_boundToHIView;
- (struct _NSRect)visibleRect;
- (void)_drawRect:(struct _NSRect)arg1 clip:(BOOL)arg2;
- (void)setNeedsDisplayInRect:(struct _NSRect)arg1;
- (void)setNeedsDisplay:(BOOL)arg1;
- (void)displayIfNeeded;

@end

@interface ITCocoaWindowAdapter : NSWindow
{
    struct OpaqueWindowPtr *_windowRef;
    unsigned int _focusSearching:1;
    unsigned int _drawingHIView:1;
    unsigned int _renderingByHIView:1;
    NSGraphicsContext *_drawContext;
    struct OpaqueEventHandlerRef *_myEventHandler;
}

- (id)initWithContentRect:(struct _NSRect)arg1 styleMask:(unsigned int)arg2 backing:(unsigned int)arg3 defer:(BOOL)arg4;
- (id)initWithCarbonWindowRef:(struct OpaqueWindowPtr *)arg1;
- (void)dealloc;
- (void)finalize;
- (BOOL)_managesWindowRef;
- (BOOL)_hasWindowRef;
- (struct _NSRect)contentRectForFrameRect:(struct _NSRect)arg1 styleMask:(unsigned int)arg2;
- (long)handleEvent:(struct OpaqueEventRef *)arg1 callRef:(struct OpaqueEventHandlerCallRef *)arg2;
- (long)handleWindowEvent:(struct OpaqueEventRef *)arg1 callRef:(struct OpaqueEventHandlerCallRef *)arg2;
- (long)handleCocoaWindowEvent:(struct OpaqueEventRef *)arg1 callRef:(struct OpaqueEventHandlerCallRef *)arg2;
- (long)handleMouseEvent:(struct OpaqueEventRef *)arg1 callRef:(struct OpaqueEventHandlerCallRef *)arg2;
- (long)handleKeyboardEvent:(struct OpaqueEventRef *)arg1 callRef:(struct OpaqueEventHandlerCallRef *)arg2;
- (long)handleControlEvent:(struct OpaqueEventRef *)arg1 callRef:(struct OpaqueEventHandlerCallRef *)arg2;
- (long)handleHICocoaViewEvent:(struct OpaqueEventRef *)arg1 callRef:(struct OpaqueEventHandlerCallRef *)arg2;
- (BOOL)_drawingHIView;
- (void)_setDrawingHIView:(BOOL)arg1;
- (void)_setDrawingContext:(id)arg1;
- (BOOL)_focusing;
- (void)_setFocusing:(BOOL)arg1;
- (BOOL)_carbonRendering;
- (void)_setCarbonRendering:(BOOL)arg1;
- (void)sendEvent:(id)arg1;
- (void)relinquishFocus;
- (void)selectKeyViewFollowingView:(id)arg1;
- (void)selectKeyViewPrecedingView:(id)arg1;
- (void)displayIfNeeded;
- (BOOL)canBecomeKeyWindow;
- (BOOL)canBecomeMainWindow;
- (BOOL)canHide;
- (int)level;
- (BOOL)makeFirstResponder:(id)arg1;
- (void)selectNextKeyView:(id)arg1;
- (void)selectPreviousKeyView:(id)arg1;
- (BOOL)makeFirstResponderFromCarbonFocus:(id)arg1;
- (void)postFocusChangeEventToQueue:(BOOL)arg1;
- (void)makeKeyWindow;
- (void)disableScreenUpdatesUntilFlush;
- (void)_enableScreenUpdatesIfNeeded;
- (void)_requiresFlush;
- (void)_enableUpdatesIfNeeded;
- (void)sendSuperEvent:(id)arg1;
- (struct OpaqueWindowPtr *)windowRef;
- (BOOL)reconcileToCarbonWindowBounds;
- (void)_setEventMask:(int)arg1;
- (void)enableFlushWindow;
- (void)_enableFlushWindowWithoutPerformingFlush;

@end

@interface ITCocoaWindowContentView : NSView
{
    BOOL _didReceiveEvent;
}

- (BOOL)isOpaque;
- (void)setNeedsDisplayInRect:(struct _NSRect)arg1;
- (void)invalidateITCocoaViewSubViewsOf:(struct OpaqueControlRef *)arg1 withInvalidRect:(struct CGRect)arg2 ofView:(struct OpaqueControlRef *)arg3;
- (struct OpaqueControlRef *)getContentHIView;
- (void)scrollWheel:(id)arg1;
- (void)_resetEventReceivedFlag;
- (BOOL)_receivedEvent;

@end

@interface HUDContainerView : NSView
{
    NSView *_webView;
    NSView *_hudView;
    _Bool _handlingMouseMoved;
}

- (id)init;
- (id)initWithWebView:(id)arg1 andHUDView:(id)arg2;
- (void)setHUDHandler:(struct WebKitHUDHandler *)arg1;
- (void)setFrameSize:(struct _NSSize)arg1;
- (void)mouseMoved:(id)arg1;

@end

@interface HUDHandlerView : NSView
{
    struct WebKitHUDHandler *_hudHandler;
}

- (struct CGPoint)convertNSToCGPoint:(struct _NSPoint)arg1;
- (void)drawRect:(struct _NSRect)arg1;
- (void)setHUDHandler:(struct WebKitHUDHandler *)arg1;
- (void)setFrameSize:(struct _NSSize)arg1;
- (id)hitTest:(struct _NSPoint)arg1;
- (void)mouseDown:(id)arg1;
- (void)mouseMoved:(id)arg1;

@end

@interface MyRedView : NSView
{
}

- (void)drawRect:(struct _NSRect)arg1;

@end

@interface WebDynamicScrollBarsViewWorkaroundGraphicsContext : NSGraphicsContext
{
}

- (id)attributes;
- (BOOL)isDrawingToScreen;
- (void)saveGraphicsState;
- (void)restoreGraphicsState;
- (void)flushGraphics;
- (void *)graphicsPort;
- (void)setShouldAntialias:(BOOL)arg1;
- (BOOL)shouldAntialias;
- (void)setImageInterpolation:(unsigned int)arg1;
- (unsigned int)imageInterpolation;
- (void)setPatternPhase:(struct _NSPoint)arg1;
- (struct _NSPoint)patternPhase;
- (void)setCompositingOperation:(unsigned int)arg1;
- (unsigned int)compositingOperation;
- (int)colorRenderingIntent;
- (void)setColorRenderingIntent:(int)arg1;
- (void)_setShouldEnforcePixelAlignment:(BOOL)arg1;
- (BOOL)_shouldEnforcePixelAlignment;
- (struct _NSRect)_alignRect:(struct _NSRect)arg1 force:(BOOL)arg2;
- (struct _NSPoint)_alignPoint:(struct _NSPoint)arg1 force:(BOOL)arg2;
- (struct _NSSize)_alignSize:(struct _NSSize)arg1 force:(BOOL)arg2;
- (id)CIContext;
- (void)_releaseCIContext;
- (void)setFocusStack:(id)arg1;
- (id)focusStack;

@end

@interface ITWebScroller : NSScroller
{
    struct UIScrollBar *mUIScrollBar;
    ITWebScroller *mPeer;
    struct ITScrollBar *mScrollBar;
}

- (id)initWithFrame:(struct _NSRect)arg1;
- (void)setPeer:(id)arg1;
- (void)setFrame:(struct _NSRect)arg1;
- (void)drawRect:(struct _NSRect)arg1;
- (unsigned int)testPart:(struct _NSPoint)arg1;
- (void)syncScrollBar;
- (void)setNeedsDisplayInRect:(struct _NSRect)arg1;
- (void)dealloc;

@end

@interface ITWebScrollView : WebDynamicScrollBarsView
{
}

- (id)initWithFrame:(struct _NSRect)arg1;
- (void)redrawScrollers;

@end

@interface HackedClipView : NSClipView
{
}

- (void)_scrollPoint:(const struct _NSPoint *)arg1 fromView:(id)arg2;
- (BOOL)_canCopyOnScrollForDeltaX:(float)arg1 deltaY:(float)arg2;
- (void)_immediateScrollToPoint:(struct _NSPoint)arg1;

@end

@interface HackedNSView : NSView
{
}

- (BOOL)_boundToHIView;

@end

@interface PPxViewNSViewWrapper : NSView
{
    struct View *mClient;
    struct View *mContainingPPxView;
    NSView *mContainingNSView;
    BOOL mDoingClientBoundsChange;
    struct OpaqueEventHandlerRef *mClientViewEventHandler;
    BOOL _visible;
}

+ (HashMap_79996020 *)getPPxViewToWrapperListMapInstance;
+ (void)hideViewWrappersForPPxView:(struct View *)arg1 shouldBeVisible:(BOOL)arg2;
- (void)_addViewWrapperToMap;
- (void)_removeViewWrapperFromMap;
- (id)initWithContainingPPxView:(struct View *)arg1 clientPPxView:(struct View *)arg2 andNSView:(id)arg3 andBounds:(struct _NSRect)arg4;
- (void)viewDidHide;
- (void)viewDidUnhide;
- (void)_releaseClientView;
- (void)clientViewDestroyed;
- (void)dealloc;
- (void)webPlugInDestroy;
- (void)viewDidMoveToSuperview;
- (void)_updateClientFrame:(id)arg1;
- (id)_findParentScrollView;
- (struct _NSRect)_subtractOtherViewsFromBounds;
- (void)_doAnyNeededScaling:(struct CGRect *)arg1;
- (void)_updateClientFrame;
- (struct _NSRect)clipRectInWindow;
- (struct Rect)parentClip;
- (void)renewGState;
- (void)drawRect:(struct _NSRect)arg1;

@end

@interface CoverFlowViewWrapper : PPxViewNSViewWrapper
{
}

- (id)initWithContainingPPxView:(struct View *)arg1 clientPPxView:(struct View *)arg2 andNSView:(id)arg3 andBounds:(struct _NSRect)arg4;
- (void)drawRect:(struct _NSRect)arg1;

@end

@interface StoreHistoryObserver : NSObject
{
    struct StorePageContext *mStoreContext;
}

- (id)_getSharedHistory;
- (id)initWithStoreContext:(struct StorePageContext *)arg1;
- (void)addItemToHistory:(id)arg1;

@end

@interface StoreFrameLoadDelegate : NSObject
{
    struct StorePageContext *mStoreContext;
    void *mLoadCompleteProc;
    void *mProcData;
    _Bool mFixHistoryItemTitlePostLoad;
    NSString *mTitleForPostLoad;
}

- (id)initWithStoreContext:(struct StorePageContext *)arg1;
- (void)setLoadCompleteProc:(void *)arg1 andData:(void *)arg2;
- (void)callLoadCompleteProc;
- (void)cancelLoadCompleteProcIfMe:(void *)arg1 andData:(void *)arg2;
- (void)setFixHistoryItemTitlePostLoad;
- (void)webView:(id)arg1 didReceiveTitle:(id)arg2 forFrame:(id)arg3;
- (void)webView:(id)arg1 didFailProvisionalLoadWithError:(id)arg2 forFrame:(id)arg3;
- (void)webView:(id)arg1 didFailLoadWithError:(id)arg2 forFrame:(id)arg3;
- (void)webView:(id)arg1 didCommitLoadForFrame:(id)arg2;
- (void)webView:(id)arg1 didFirstVisuallyNonEmptyLayoutInFrame:(id)arg2;
- (void)webView:(id)arg1 didClearWindowObject:(id)arg2 forFrame:(id)arg3;

@end

@interface BookletFrameLoadDelegate : NSObject
{
    struct BookletJSEventDelegate *mEventDelegate;
}

- (id)initWithBrowserWindow:(struct BookletJSEventDelegate *)arg1;
- (void)webView:(id)arg1 didFinishLoadForFrame:(id)arg2;
- (void)webView:(id)arg1 didClearWindowObject:(id)arg2 forFrame:(id)arg3;

@end

@interface StoreUIDelegate : NSObject
{
    struct View *mContainingPPxView;
}

- (id)initWithContainingPPxView:(struct View *)arg1;
- (void)webViewClose:(id)arg1;
- (void)webView:(id)arg1 setStatusText:(id)arg2;
- (id)webViewStatusText:(id)arg1;
- (void)copyLinkAction:(id)arg1;
- (void)viewSourceAction:(id)arg1;
- (id)createMenuItem:(id)arg1 andTag:(int)arg2 andTitle:(id)arg3 andSelector:(SEL)arg4;
- (id)createViewSourceMenuItem:(id)arg1;
- (id)createCopyLinkMenuItem:(id)arg1;
- (id)webView:(id)arg1 contextMenuItemsForElement:(id)arg2 defaultMenuItems:(id)arg3;
- (unsigned int)webView:(id)arg1 dragDestinationActionMaskForDraggingInfo:(id)arg2;
- (unsigned int)webView:(id)arg1 dragSourceActionMaskForPoint:(struct _NSPoint)arg2;
- (void)webView:(id)arg1 willPerformDragSourceAction:(int)arg2 fromPoint:(struct _NSPoint)arg3 withPasteboard:(id)arg4;
- (id)getMovieSrcURLFromArguments:(id)arg1;
- (id)webView:(id)arg1 plugInViewWithArguments:(id)arg2;
- (id)webView:(id)arg1 createWebViewWithRequest:(id)arg2;

@end

@interface JavaScriptNewWindowHandler : NSObject
{
    WebView *_webView;
}

- (id)init;
- (void)dealloc;
- (void)webView:(id)arg1 decidePolicyForNavigationAction:(id)arg2 request:(id)arg3 frame:(id)arg4 decisionListener:(id)arg5;
- (id)webView;

@end

@interface LeopardPasteboardBugWorkAround : NSObject
{
}

- (void)pasteboard:(id)arg1 provideDataForType:(id)arg2;

@end

@interface StoreWebPolicyDelegate : NSObject
{
    struct StoreHTMLDisplay *mHtmlDisplay;
}

- (id)initWithHTMLDisplay:(struct StoreHTMLDisplay *)arg1;
- (void)webView:(id)arg1 decidePolicyForNavigationAction:(id)arg2 request:(id)arg3 frame:(id)arg4 decisionListener:(id)arg5;
- (void)webView:(id)arg1 decidePolicyForNewWindowAction:(id)arg2 request:(id)arg3 newFrameName:(id)arg4 decisionListener:(id)arg5;
- (void)webView:(id)arg1 decidePolicyForMIMEType:(id)arg2 request:(id)arg3 frame:(id)arg4 decisionListener:(id)arg5;

@end

@interface StoreResourceLoadDelegate : NSObject
{
    struct StoreHTMLDisplay *mHtmlDisplay;
    unsigned int mRequestIDMaster;
    struct HashSet<long unsigned int, IT::IntHash<uintptr_t>, IT::HashTraits<long unsigned int>> *mNavIDsSet;
}

- (id)initWithHTMLDisplay:(struct StoreHTMLDisplay *)arg1;
- (void)dealloc;
- (id)webView:(id)arg1 identifierForInitialRequest:(id)arg2 fromDataSource:(id)arg3;
- (BOOL)isNavIdentifier:(id)arg1;
- (void)webView:(id)arg1 resource:(id)arg2 didReceiveResponse:(id)arg3 fromDataSource:(id)arg4;
- (id)webView:(id)arg1 resource:(id)arg2 willSendRequest:(id)arg3 redirectResponse:(id)arg4 fromDataSource:(id)arg5;
- (void)removeIdentifier:(id)arg1;
- (void)webView:(id)arg1 resource:(id)arg2 didFinishLoadingFromDataSource:(id)arg3;
- (void)webView:(id)arg1 resource:(id)arg2 didFailLoadingWithError:(id)arg3 fromDataSource:(id)arg4;

@end

@interface StoreProgressObserver : NSObject
{
    struct Playlist *mPlaylist;
    struct AppProgressBar *mProgressBar;
    WebView *mWebView;
    struct MessageReceiver *mAppListener;
    struct ITTimer *mTimer;
    struct TimerBridge *mBridge;
}

- (void)_progressbarDestroyed:(struct AppProgressBar *)arg1;
- (void)_cleanupAppListener;
- (void)dealloc;
- (id)initWithPlaylist:(struct Playlist *)arg1 andWebView:(id)arg2;
- (void)started:(id)arg1;
- (void)changed:(id)arg1;
- (void)finished:(id)arg1;
- (void)stopLoading;
- (void)_FlushProgresBarTimerAction:(RefPtr_6700895f)arg1;

@end

@interface ResourcesURLProtocol : NSURLProtocol
{
}

+ (BOOL)canInitWithRequest:(id)arg1;
+ (id)canonicalRequestForRequest:(id)arg1;
- (void)startLoading;
- (void)stopLoading;

@end

@interface ArtworkURLProtocol : NSURLProtocol
{
}

+ (BOOL)canInitWithRequest:(id)arg1;
+ (id)canonicalRequestForRequest:(id)arg1;
- (void)startLoading;
- (void)stopLoading;

@end

@interface WelcomeWindowWebPolicyDelegate : NSObject
{
}

- (void)webView:(id)arg1 decidePolicyForNewWindowAction:(id)arg2 request:(id)arg3 newFrameName:(id)arg4 decisionListener:(id)arg5;

@end

@interface WelcomeWindowUIDelegate : NSObject
{
}

- (id)webView:(id)arg1 contextMenuItemsForElement:(id)arg2 defaultMenuItems:(id)arg3;
- (unsigned int)webView:(id)arg1 dragDestinationActionMaskForDraggingInfo:(id)arg2;
- (unsigned int)webView:(id)arg1 dragSourceActionMaskForPoint:(struct _NSPoint)arg2;

@end

@interface BookletUIDelegate : NSObject
{
}

- (id)webView:(id)arg1 contextMenuItemsForElement:(id)arg2 defaultMenuItems:(id)arg3;
- (unsigned int)webView:(id)arg1 dragDestinationActionMaskForDraggingInfo:(id)arg2;
- (unsigned int)webView:(id)arg1 dragSourceActionMaskForPoint:(struct _NSPoint)arg2;
- (id)webView:(id)arg1 plugInViewWithArguments:(id)arg2;
- (void)webViewClose:(id)arg1;

@end

@interface BookletWebPolicyDelegate : NSObject
{
}

- (void)webView:(id)arg1 decidePolicyForNavigationAction:(id)arg2 request:(id)arg3 frame:(id)arg4 decisionListener:(id)arg5;
- (void)webView:(id)arg1 decidePolicyForNewWindowAction:(id)arg2 request:(id)arg3 newFrameName:(id)arg4 decisionListener:(id)arg5;

@end

@interface BookletURLProtocol : NSURLProtocol
{
}

+ (BOOL)canInitWithRequest:(id)arg1;
+ (id)canonicalRequestForRequest:(id)arg1;
- (_Bool)sendDataToClient:(id)arg1 fromBookletPath:(struct JRFileSpec *)arg2 orDaapURL:(struct __CFString *)arg3;
- (void)startLoading;
- (void)stopLoading;

@end

@interface ChapterImageURLProtocol : NSURLProtocol
{
}

+ (void)registerHandler;
+ (BOOL)canInitWithRequest:(id)arg1;
+ (id)canonicalRequestForRequest:(id)arg1;
- (void)startLoading;
- (void)stopLoading;

@end

@interface WelcomeWindowFrameLoadDelegate : NSObject
{
}

- (void)webView:(id)arg1 didFinishLoadForFrame:(id)arg2;
- (void)webView:(id)arg1 didFailLoadWithError:(id)arg2 forFrame:(id)arg3;
- (void)webView:(id)arg1 didClearWindowObject:(id)arg2 forFrame:(id)arg3;

@end

@interface BookletResourceLoadDelegate : NSObject
{
    unsigned long long mStoreID;
    unsigned long long mPersistentID;
    unsigned short mXID[256];
}

- (id)initWithPlaylistItem:(struct PlaylistItem *)arg1;
- (id)initWithTrackInfo:(struct TrackInfo *)arg1;
- (id)webView:(id)arg1 resource:(id)arg2 willSendRequest:(id)arg3 redirectResponse:(id)arg4 fromDataSource:(id)arg5;

@end

@interface MovieViewWrapper : PPxViewNSViewWrapper
{
    struct PlayerPluginData *mPlugIn;
    void *mConnectionData;
    NSURL *mURL;
    NSDictionary *mObjectTagAttribs;
    struct Rect mNaturalBounds;
}

+ (void)stopMoviePlaybackForContainingView:(struct View *)arg1;
- (id)initWithContainingPPxView:(struct View *)arg1 clientPPxView:(struct View *)arg2 andNSView:(id)arg3 andBounds:(struct _NSRect)arg4 andURL:(id)arg5 andParams:(id)arg6;
- (void)dealloc;
- (void)_setupMovieViewIfNeeded;
- (void)_doAnyNeededScaling:(struct CGRect *)arg1;
- (void)_updateClientFrame:(id)arg1;
- (void)_releaseClientView;
- (void)_stopMoviePlayback;

@end

@interface WelcomeWindowResourceLoadDelegate : NSObject
{
    struct __CFString *mAcceptLanguageHeader;
    NSURLAuthenticationChallenge *currentChallenge;
}

- (void)dealloc;
- (id)init;
- (id)currentChallenge;
- (void)setCurrentChallenge:(id)arg1;
- (void)webView:(id)arg1 resource:(id)arg2 didReceiveAuthenticationChallenge:(id)arg3 fromDataSource:(id)arg4;
- (id)webView:(id)arg1 resource:(id)arg2 willSendRequest:(id)arg3 redirectResponse:(id)arg4 fromDataSource:(id)arg5;
- (void)webView:(id)arg1 resource:(id)arg2 didReceiveResponse:(id)arg3 fromDataSource:(id)arg4;

@end

@interface XMLDownloadDelegate : NSObject
{
    struct __CFDictionary *_downloadsToResponse;
    struct __CFDictionary *_downloadsToPath;
    WebView *_webView;
}

- (id)initWithWebView:(id)arg1;
- (void)dealloc;
- (void)stopAllDownloads;
- (void)_doneWithDownload:(id)arg1;
- (void)downloadDidBegin:(id)arg1;
- (void)download:(id)arg1 didReceiveResponse:(id)arg2;
- (void)download:(id)arg1 decideDestinationWithSuggestedFilename:(id)arg2;
- (void)download:(id)arg1 didCreateDestination:(id)arg2;
- (void)downloadDidFinish:(id)arg1;
- (void)download:(id)arg1 didFailWithError:(id)arg2;

@end

@interface NSURLProtocol (ITURLProtocolAdditions)
+ (void)registerHandler;
+ (void)unregisterHandler;
@end

